
import React, { useState } from 'react';

// Popup component
const Popup = ({ content, onClose }) => (
  <div style={{
    position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',
    padding: '20px', backgroundColor: 'white', border: '1px solid #ccc', zIndex: 1000
  }}>
    <h3>Alert Log Content</h3>
    <pre>{content}</pre>
    <button onClick={onClose}>Close</button>
  </div>
);

function YourComponent() {
  const [isPopupVisible, setPopupVisible] = useState(false);
  const [popupContent, setPopupContent] = useState('');

  // Mock data fetch or any logic to get content for "View" button
  const handleViewClick = () => {
    const content = "This is the alert log content you want to display."; // Replace with actual fetch logic
    setPopupContent(content);
    setPopupVisible(true);
  };

  const handleClosePopup = () => {
    setPopupVisible(false);
  };

  return (
    <div>
      <button className="download-btn">Download</button>
      <button className="view-btn" onClick={handleViewClick}>View</button>
      
      {isPopupVisible && <Popup content={popupContent} onClose={handleClosePopup} />}
    </div>
  );
}

export default YourComponent;





function generateHTMLTable(alertLogData, name) {
    let table = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Alert Log Table</title>
        <style>
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid black; padding: 8px; text-align: left; }
        </style>
    </head>
    <body>
        <h2>Alert Log Data for ${name}</h2>
        <table>
            <tr>
                <th>Content</th>
            </tr>
    `;

    // Iterate through the alert log data array
    for (const entry of alertLogData) {
        if (entry["MESSAGE_TEXT"]) {
            // Extract the message content directly without the "MESSAGE_TEXT" key
            const messageContent = entry["MESSAGE_TEXT"].replace(/\n/g, '').trim();

            // Add the cleaned message content to the table row
            table += `<tr><td>${messageContent}</td></tr>`;
        }
    }

    // Close the table and HTML structure
    table += `
        </table>
    </body>
    </html>
    `;

    return table;
}





"Thank you for the appreciation! I'm glad to contribute to the team and will continue working with the same momentum, especially with the upcoming AI Slack bot project. Looking forward to more successful automation implementations in the SRE DB space."
// Function to fetch the alert log data and convert it to an HTML table
async function fetchAndDownloadAlertLogTable() {
    try {
        // Fetch the data from the backend
        const response = await axiosConfig.post('/DatabaseHealthCheckReports/db_alertlog', {
            env, cred_env, host_Name, dbName, portNum, noRecentLines
        });

        if (response.status === 200) {
            const alertLogData = response.data;  // This is the JSON data
            const tableHTML = generateHTMLTable(alertLogData);  // Generate the table HTML

            // Create a Blob with the table HTML and trigger the download as an .html file
            downloadAsHTMLFile(tableHTML, `${host_Name}_alertlog.html`);
        }
    } catch (error) {
        console.error("Error fetching data: ", error);
    }
}

// Function to generate an HTML table from JSON data
function generateHTMLTable(alertLogData) {
    // Begin HTML structure for the table
    let table = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Alert Log Table</title>
        <style>
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid black; padding: 8px; text-align: left; }
        </style>
    </head>
    <body>
        <h2>Alert Log Data for ${alertLogData.ALERTLOGHOST}</h2>
        <table>
            <tr>
                <th>Parameter</th>
                <th>Message Text</th>
            </tr>`;

    // Iterate through the alert log data to fill in the rows
    for (const key in alertLogData) {
        // Check if the value is an object or array, and handle accordingly
        if (typeof alertLogData[key] === 'object') {
            if (Array.isArray(alertLogData[key])) {
                // If it's an array, we iterate over each item in the array
                alertLogData[key].forEach((item, index) => {
                    table += `<tr><td>${key} [${index}]</td><td>${JSON.stringify(item)}</td></tr>`;
                });
            } else {
                // If it's an object, we display the key-value pairs of the object
                table += `<tr><td>${key}</td><td>${JSON.stringify(alertLogData[key])}</td></tr>`;
            }
        } else {
            // Otherwise, display the simple key-value pair
            table += `<tr><td>${key}</td><td>${alertLogData[key]}</td></tr>`;
        }
    }

    // Close the table and HTML structure
    table += `
        </table>
    </body>
    </html>`;

    return table;
}

// Function to download the table HTML as a file
function downloadAsHTMLFile(htmlContent, fileName) {
    // Create a Blob with the HTML content and the MIME type 'text/html'
    const blob = new Blob([htmlContent], { type: 'text/html' });
    
    // Create a link element to trigger the download
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.href = url;
    link.download = fileName;  // Specify the filename for download
    
    // Append the link to the body and trigger the click to download the file
    document.body.appendChild(link);
    link.click();
    
    // Clean up the link element after the download is triggered
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
}

// Trigger the download process
fetchAndDownloadAlertLogTable();











import React, { useState } from 'react';
import axios from 'axios';

const DownloadAlertLog = () => {
  const [hostName, setHostName] = useState(''); // To store the host name

  const handleDownload = async () => {
    try {
      // Make the axios POST request (adjust the URL if needed)
      const response = await axios.post('http://localhost:5000/DatabaseHealthCheckReports/db_alertlog', {
        env: 'prod', // Assuming 'prod', adjust if needed
        cred_env: 'prod', // Adjust based on your logic
        host_Name: hostName, // The host name
        dbName: 'yourDBName', // Replace with the actual DB name
        portNum: 'yourPortNumber', // Replace with the actual port number
        noRecentLines: 'numberOfRecentLines' // Replace with the actual value
      });

      if (response.status === 200) {
        // Assuming the response data needs to be converted into a text file
        const fileData = JSON.stringify(response.data, null, 2); // Convert response data to string (pretty-printed)

        // Create a blob from the response data
        const blob = new Blob([fileData], { type: 'text/plain' });

        // Create a URL for the blob
        const url = window.URL.createObjectURL(blob);

        // Create a link element
        const link = document.createElement('a');
        link.href = url;
        link.download = `${hostName}_alertlog.txt`; // Use host name for the file name

        // Append the link to the body and trigger the download
        document.body.appendChild(link);
        link.click();

        // Remove the link after download
        document.body.removeChild(link);
      } else {
        console.error('Failed to fetch the alert log');
      }
    } catch (error) {
      console.error('Error during download', error);
    }
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Enter Host Name"
        value={hostName}
        onChange={(e) => setHostName(e.target.value)}
      />
      <button onClick={handleDownload}>Download Alert Log</button>
    </div>
  );
};

export default DownloadAlertLog;




<td key={key} style={{ 
  border: '1px solid #ddd', 
  padding: '8px', 
  textAlign: key === 'Alertlog' ? 'center' : 'left' 
}}>
  {typeof item[key] === 'number' ? (
    Number.isInteger(item[key]) ? item[key] : item[key].toFixed(1)
  ) : (
    key === 'Alertlog' && (
      <button 
        style={{
          width: '60%',
          display: 'block',
          margin: '0 auto',  // Center the button horizontally
          textAlign: 'center'
        }} 
        className="btn btn-primary btn-block" 
        onClick={() => KillProcess(item)}
      >
        Download
      </button>
    )
  )}
</td>



<button
  style={{
    width: '50%',    // Adjust percentage width based on need
    margin: '0 auto', // Centers the button horizontally
    display: 'block', // Ensures the button is treated as a block element
    padding: '5px',   // Adjust the padding for a small button
    fontSize: '12px', // Adjust the font size for neatness
    textAlign: 'center' // Ensures text inside button is centered
  }}
  className="btn btn-primary btn-block"
/>



import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';  // Import the CSS file

function App() {
  const [cluster, setCluster] = useState('');
  const [env, setEnv] = useState('');
  const [dc, setDc] = useState('');
  const [servers, setServers] = useState([]);
  const [selectedServer, setSelectedServer] = useState('');
  const [query, setQuery] = useState('');
  const [queryResult, setQueryResult] = useState(null);
  const [error, setError] = useState('');

  // Fetch servers automatically when cluster, env, or dc is changed
  useEffect(() => {
    const fetchServers = async () => {
      if (cluster && env && dc) { // Only fetch if all 3 are selected
        try {
          const response = await axios.post('http://localhost:5000/api/getServers', {
            cluster,
            env,
            dc
          });
          setServers(response.data);
          setSelectedServer('');  // Reset selected server when new servers are fetched
          setError('');
        } catch (err) {
          setError('Error fetching servers.');
          setServers([]);
        }
      }
    };

    fetchServers();
  }, [cluster, env, dc]); // This effect will run every time cluster, env, or dc changes

  const handleQueryExecution = async () => {
    if (!selectedServer) {
      setError('Please select a server.');
      return;
    }
    try {
      const response = await axios.post('http://localhost:5000/api/executeQuery', { query });
      setQueryResult(response.data);
      setError('');
    } catch (err) {
      setError('Error executing query: ' + err.response.data.error);
      setQueryResult(null);
    }
  };

  return (
    <div className="App">
      <div className="container">
        <h1>Cassandra Query Executor</h1>
        <div className="form-group">
          <label>Cluster:</label>
          <select value={cluster} onChange={(e) => setCluster(e.target.value)}>
            <option value="">Select Cluster</option>
            <option value="OR">OR</option>
            <option value="CART">CART</option>
            <option value="CDN1">CDN1</option>
          </select>
        </div>
        <div className="form-group">
          <label>ENV:</label>
          <select value={env} onChange={(e) => setEnv(e.target.value)}>
            <option value="">Select ENV</option>
            <option value="QA1">QA1</option>
            <option value="QA2">QA2</option>
            <option value="QA3">QA3</option>
            <option value="QA4">QA4</option>
            <option value="QA5">QA5</option>
            <option value="QA6">QA6</option>
          </select>
        </div>
        <div className="form-group">
          <label>DC:</label>
          <select value={dc} onChange={(e) => setDc(e.target.value)}>
            <option value="">Select DC</option>
            <option value="SDC1">SDC1</option>
            <option value="EAST">EAST</option>
            <option value="WEST">WEST</option>
          </select>
        </div>

        {/* Servers Dropdown */}
        {servers.length > 0 && (
          <div className="form-group">
            <label>Servers:</label>
            <select value={selectedServer} onChange={(e) => setSelectedServer(e.target.value)}>
              <option value="">Select Server</option>
              {servers.map((server, index) => (
                <option key={index} value={server}>{server}</option>
              ))}
            </select>
          </div>
        )}

        <div className="form-group">
          <label>Query:</label>
          <textarea value={query} onChange={(e) => setQuery(e.target.value)} />
        </div>
        <button onClick={handleQueryExecution} className="btn">Execute Query</button>
        {error && <div className="error">{error}</div>}
        {queryResult && (
          <div>
            <h3>Query Result</h3>
            <table className="query-result">
              <thead>
                <tr>
                  {Object.keys(queryResult[0]).map((key, index) => (
                    <th key={index}>{key}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {queryResult.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    {Object.values(row).map((value, cellIndex) => (
                      <td key={cellIndex}>{value}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;




import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';  // Import the CSS file

function App() {
  const [cluster, setCluster] = useState('');
  const [env, setEnv] = useState('');
  const [dc, setDc] = useState('');
  const [servers, setServers] = useState([]);
  const [query, setQuery] = useState('');
  const [queryResult, setQueryResult] = useState(null);
  const [error, setError] = useState('');

  // Fetch servers automatically when cluster, env, or dc is changed
  useEffect(() => {
    const fetchServers = async () => {
      if (cluster && env && dc) { // Only fetch if all 3 are selected
        try {
          const response = await axios.post('http://localhost:5000/api/getServers', {
            cluster,
            env,
            dc
          });
          setServers(response.data);
          setError('');
        } catch (err) {
          setError('Error fetching servers.');
          setServers([]);
        }
      }
    };

    fetchServers();
  }, [cluster, env, dc]); // This effect will run every time cluster, env, or dc changes

  const handleQueryExecution = async () => {
    try {
      const response = await axios.post('http://localhost:5000/api/executeQuery', { query });
      setQueryResult(response.data);
      setError('');
    } catch (err) {
      setError('Error executing query: ' + err.response.data.error);
      setQueryResult(null);
    }
  };

  return (
    <div className="App">
      <div className="container">
        <h1>Cassandra Query Executor</h1>
        <div className="form-group">
          <label>Cluster:</label>
          <select value={cluster} onChange={(e) => setCluster(e.target.value)}>
            <option value="">Select Cluster</option>
            <option value="OR">OR</option>
            <option value="CART">CART</option>
            <option value="CDN1">CDN1</option>
          </select>
        </div>
        <div className="form-group">
          <label>ENV:</label>
          <select value={env} onChange={(e) => setEnv(e.target.value)}>
            <option value="">Select ENV</option>
            <option value="QA1">QA1</option>
            <option value="QA2">QA2</option>
            <option value="QA3">QA3</option>
            <option value="QA4">QA4</option>
            <option value="QA5">QA5</option>
            <option value="QA6">QA6</option>
          </select>
        </div>
        <div className="form-group">
          <label>DC:</label>
          <select value={dc} onChange={(e) => setDc(e.target.value)}>
            <option value="">Select DC</option>
            <option value="SDC1">SDC1</option>
            <option value="EAST">EAST</option>
            <option value="WEST">WEST</option>
          </select>
        </div>
        {servers.length > 0 && (
          <div>
            <h3>Available Servers</h3>
            <ul className="server-list">
              {servers.map((server, index) => (
                <li key={index}>{server}</li>
              ))}
            </ul>
          </div>
        )}
        <div className="form-group">
          <label>Query:</label>
          <textarea value={query} onChange={(e) => setQuery(e.target.value)} />
        </div>
        <button onClick={handleQueryExecution} className="btn">Execute Query</button>
        {error && <div className="error">{error}</div>}
        {queryResult && (
          <div>
            <h3>Query Result</h3>
            <table className="query-result">
              <thead>
                <tr>
                  {Object.keys(queryResult[0]).map((key, index) => (
                    <th key={index}>{key}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {queryResult.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    {Object.values(row).map((value, cellIndex) => (
                      <td key={cellIndex}>{value}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;





* {
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f7f7f7;
}

.App {
  text-align: center;
  padding: 40px 0;
}

.container {
  background: #ffffff;
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h1 {
  color: #333;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

select, textarea {
  width: 100%;
  padding: 10px;
  font-size: 16px;
  border-radius: 4px;
  border: 1px solid #ccc;
}

textarea {
  height: 100px;
}

.btn {
  padding: 10px 20px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

.btn:hover {
  background-color: #218838;
}

.server-list {
  text-align: left;
  margin: 20px 0;
}

.server-list li {
  background: #f1f1f1;
  padding: 10px;
  margin-bottom: 5px;
  border-radius: 4px;
}

.error {
  color: red;
  font-weight: bold;
}

.query-result {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.query-result th, .query-result td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}

.query-result th {
  background-color: #f1f1f1;
}

.query-result tr:nth-child(even) {
  background-color: #f9f9f9;
}










import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [cluster, setCluster] = useState('');
  const [env, setEnv] = useState('');
  const [dc, setDc] = useState('');
  const [servers, setServers] = useState([]);
  const [query, setQuery] = useState('');
  const [queryResult, setQueryResult] = useState(null);
  const [error, setError] = useState('');

  const handleServerFetch = async () => {
    try {
      const response = await axios.post('http://localhost:5000/api/getServers', {
        cluster,
        env,
        dc
      });
      setServers(response.data);
      setError('');
    } catch (err) {
      setError('Error fetching servers.');
      setServers([]);
    }
  };

  const handleQueryExecution = async () => {
    try {
      const response = await axios.post('http://localhost:5000/api/executeQuery', { query });
      setQueryResult(response.data);
      setError('');
    } catch (err) {
      setError('Error executing query: ' + err.response.data.error);
      setQueryResult(null);
    }
  };

  return (
    <div className="App">
      <h1>Cassandra Query Executor</h1>
      <div>
        <label>Cluster:</label>
        <select value={cluster} onChange={(e) => setCluster(e.target.value)}>
          <option value="">Select Cluster</option>
          <option value="OR">OR</option>
          <option value="CART">CART</option>
          <option value="CDN1">CDN1</option>
          {/* Add more options based on your data */}
        </select>
      </div>
      <div>
        <label>ENV:</label>
        <select value={env} onChange={(e) => setEnv(e.target.value)}>
          <option value="">Select ENV</option>
          <option value="QA1">QA1</option>
          <option value="QA2">QA2</option>
          <option value="QA3">QA3</option>
          <option value="QA4">QA4</option>
          <option value="QA5">QA5</option>
          <option value="QA6">QA6</option>
          {/* Add more options based on your data */}
        </select>
      </div>
      <div>
        <label>DC:</label>
        <select value={dc} onChange={(e) => setDc(e.target.value)}>
          <option value="">Select DC</option>
          <option value="SDC1">SDC1</option>
          <option value="EAST">EAST</option>
          <option value="WEST">WEST</option>
          {/* Add more options based on your data */}
        </select>
      </div>
      <button onClick={handleServerFetch}>Fetch Servers</button>
      {servers.length > 0 && (
        <div>
          <h3>Available Servers</h3>
          <ul>
            {servers.map((server, index) => (
              <li key={index}>{server}</li>
            ))}
          </ul>
        </div>
      )}
      <div>
        <label>Query:</label>
        <textarea value={query} onChange={(e) => setQuery(e.target.value)} />
      </div>
      <button onClick={handleQueryExecution}>Execute Query</button>
      {error && <div style={{ color: 'red' }}>{error}</div>}
      {queryResult && (
        <div>
          <h3>Query Result</h3>
          <table border="1">
            <thead>
              <tr>
                {Object.keys(queryResult[0]).map((key, index) => (
                  <th key={index}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {queryResult.map((row, rowIndex) => (
                <tr key={rowIndex}>
                  {Object.values(row).map((value, cellIndex) => (
                    <td key={cellIndex}>{value}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

export default App;




const express = require('express');
const cassandra = require('cassandra-driver');
const app = express();
const PORT = 5000;

app.use(express.json());

// Sample Data for Servers based on Cluster, ENV, and DC
const serverList = {
  "OR": {
    "QA1": {
      "SDC1": [
        "mcs-cass-t1-n3.ebiz.verizon.com",
        "mcs-cass-t1-n2.ebiz.verizon.com",
        "mcs-cass-t1-n4.ebiz.verizon.com",
        "mcs-cass-t1-n1.ebiz.verizon.com"
      ]
    }
  }
  // Add other clusters, ENV, and DC combinations here
};

// API to get servers based on Cluster, ENV, and DC
app.post('/api/getServers', (req, res) => {
  const { cluster, env, dc } = req.body;
  if (serverList[cluster] && serverList[cluster][env] && serverList[cluster][env][dc]) {
    res.json(serverList[cluster][env][dc]);
  } else {
    res.status(400).json({ error: 'Invalid Cluster, ENV, or DC' });
  }
});

// Cassandra query execution
const client = new cassandra.Client({
  contactPoints: ['127.0.0.1'], // Replace with actual contact points
  localDataCenter: 'datacenter1', // Replace with your data center
  keyspace: 'your_keyspace' // Replace with your keyspace
});

app.post('/api/executeQuery', (req, res) => {
  const { query } = req.body;
  
  // Prevent destructive queries
  if (query.includes("DROP") || query.includes("DELETE")) {
    return res.status(400).json({ error: "Query contains prohibited commands." });
  }

  client.execute(query, [], (err, result) => {
    if (err) {
      res.status(500).json({ error: 'Error executing query' });
    } else {
      res.json(result.rows);
    }
  });
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
















import { useState } from 'react';

function DatabaseHealthCheckReports(props) {
  const [killMessage, setKillMessage] = useState(''); // For alert
  const [killedItems, setKilledItems] = useState({}); // Track killed processes

  const killProcess = async (item) => {
    console.log(item.INST_ID, item.SID, item['SERIAL#']);
    
    let instId = item.INST_ID;
    let sId = item.SID;
    let serialNum = item['SERIAL#'];
    let cred_env = "";

    if (env === "AWS-PROD" || env === "ONPREM-PROD") {
      cred_env = 'prod';
    } else if (env === "AWS-NONPROD" || env === "ONPREM-NONPROD") {
      cred_env = 'non-prod';
    }

    const response = await axiosConfig.post('/DatabaseHealthCheckReports/kill_session', {
      env,
      cred_env,
      hostName,
      dbName,
      portNum,
      instId,
      sId,
      serialNum
    });

    if (response.status === 200) { // Assuming 200 is success
      setKillMessage(`Session for INST_ID: ${instId} killed successfully`);
      
      // Mark this item as killed
      setKilledItems((prevKilledItems) => ({
        ...prevKilledItems,
        [item.INST_ID]: true
      }));
      
      // Clear the message after 3 seconds
      setTimeout(() => {
        setKillMessage('');
      }, 3000);
    }
  };

  return (
    <div>
      {killMessage && <div className="alert">{killMessage}</div>}
      
      <table>
        <tbody>
          {group.map((item, rowIndex) => (
            <tr key={rowIndex}>
              {keys.map((key) => (
                <td key={key} style={{ border: '1px solid #ddd', padding: '8px' }}>
                  {typeof item[key] === 'number' ? (Number.isInteger(item[key]) ? item[key] : item[key].toFixed(1)) : item[key]}
                  {key === 'Action' && (
                    <button
                      className="btn btn-primary btn-block"
                      onClick={() => killProcess(item)}
                      disabled={killedItems[item.INST_ID]} // Disable if the item is killed
                    >
                      {killedItems[item.INST_ID] ? 'Killed' : 'Kill'}
                    </button>
                  )}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default DatabaseHealthCheckReports;






const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '20px',
    marginBottom: '20px'
};

const thStyle = {
    border: '1px solid #ddd',
    padding: '12px',
    backgroundColor: '#f2f2f2',
    color: '#333',
    fontSize: '16px',
    textAlign: 'center',
};

const tdStyle = {
    border: '1px solid #ddd',
    padding: '12px',
    fontSize: '14px',
    textAlign: 'center',
    wordBreak: 'break-word',  // Helps to manage long text in cells
};

const headerStyle = {
    fontWeight: 'bold',
    marginTop: '20px',
    marginBottom: '10px',
    fontSize: '18px',
    color: '#333',
    textAlign: 'left',
    padding: '10px 0',
};
