


import { useState } from 'react';

function DatabaseHealthCheckReports(props) {
  const [killMessage, setKillMessage] = useState(''); // For alert
  const [killedItems, setKilledItems] = useState({}); // Track killed processes

  const killProcess = async (item) => {
    console.log(item.INST_ID, item.SID, item['SERIAL#']);
    
    let instId = item.INST_ID;
    let sId = item.SID;
    let serialNum = item['SERIAL#'];
    let cred_env = "";

    if (env === "AWS-PROD" || env === "ONPREM-PROD") {
      cred_env = 'prod';
    } else if (env === "AWS-NONPROD" || env === "ONPREM-NONPROD") {
      cred_env = 'non-prod';
    }

    const response = await axiosConfig.post('/DatabaseHealthCheckReports/kill_session', {
      env,
      cred_env,
      hostName,
      dbName,
      portNum,
      instId,
      sId,
      serialNum
    });

    if (response.status === 200) { // Assuming 200 is success
      setKillMessage(`Session for INST_ID: ${instId} killed successfully`);
      
      // Mark this item as killed
      setKilledItems((prevKilledItems) => ({
        ...prevKilledItems,
        [item.INST_ID]: true
      }));
      
      // Clear the message after 3 seconds
      setTimeout(() => {
        setKillMessage('');
      }, 3000);
    }
  };

  return (
    <div>
      {killMessage && <div className="alert">{killMessage}</div>}
      
      <table>
        <tbody>
          {group.map((item, rowIndex) => (
            <tr key={rowIndex}>
              {keys.map((key) => (
                <td key={key} style={{ border: '1px solid #ddd', padding: '8px' }}>
                  {typeof item[key] === 'number' ? (Number.isInteger(item[key]) ? item[key] : item[key].toFixed(1)) : item[key]}
                  {key === 'Action' && (
                    <button
                      className="btn btn-primary btn-block"
                      onClick={() => killProcess(item)}
                      disabled={killedItems[item.INST_ID]} // Disable if the item is killed
                    >
                      {killedItems[item.INST_ID] ? 'Killed' : 'Kill'}
                    </button>
                  )}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default DatabaseHealthCheckReports;






const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '20px',
    marginBottom: '20px'
};

const thStyle = {
    border: '1px solid #ddd',
    padding: '12px',
    backgroundColor: '#f2f2f2',
    color: '#333',
    fontSize: '16px',
    textAlign: 'center',
};

const tdStyle = {
    border: '1px solid #ddd',
    padding: '12px',
    fontSize: '14px',
    textAlign: 'center',
    wordBreak: 'break-word',  // Helps to manage long text in cells
};

const headerStyle = {
    fontWeight: 'bold',
    marginTop: '20px',
    marginBottom: '10px',
    fontSize: '18px',
    color: '#333',
    textAlign: 'left',
    padding: '10px 0',
};
