function StatusBarChart(data) {
    // Data provided
    const tablespaceData = [
        {
            tablespace_name: "POSDB_DATA1",
            block_size_kb: 8,
            tot_size_mb: 695344,
            tot_used_mb: 622452,
            tot_free_mb: 72892,
            pct_used: 89.52
        },
        // Add more tablespaces as necessary
    ];

    // Convert MB to GB and prepare data for chart
    const labels = [];
    const totSizeGB = [];
    const totUsedGB = [];
    const totFreeGB = [];

    tablespaceData.forEach(item => {
        labels.push(item.tablespace_name);
        totSizeGB.push(item.tot_size_mb / 1024);
        totUsedGB.push(item.tot_used_mb / 1024);
        totFreeGB.push(item.tot_free_mb / 1024);
    });

    // Create the chart
    const ctx = document.getElementById('myChart').getContext('2d');
    const myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Total Size (GB)',
                    data: totSizeGB,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Total Used (GB)',
                    data: totUsedGB,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Total Free (GB)',
                    data: totFreeGB,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                x: {
                    stacked: true
                },
                y: {
                    stacked: true,
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Size (GB)'
                    }
                }
            }
        }
    });
}


















// Assume `db_pie` is the object from the first image
const db_pie = {
    metaData: [{ name: 'INSTANCE_NUMBER' }, { name: 'INSTANCE_NAME' }, { name: 'HOST_NAME' }, { name: 'STATUS' }],
    rows: [
        {
            HOST_NAME: "10.119.11.217.ebiz.verizon.com",
            INSTANCE_NAME: "nposqa4",
            INSTANCE_NUMBER: 1,
            STATUS: "OPEN"
        },
        // Add more rows as needed
    ]
};

// Convert `db_pie` data to required format
const instances = db_pie.rows.map((row, index) => ({
    INSTANCE_NUMBER: row.INSTANCE_NUMBER || index + 1,  // Assign instance number dynamically if not provided
    INSTANCE_NAME: row.INSTANCE_NAME,
    HOST_NAME: row.HOST_NAME.split('.')[0],  // Strip domain to match the second image format
    STATUS: row.STATUS
}));

// Now `instances` will be in the format similar to the second image
console.log(instances);
