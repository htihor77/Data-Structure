

const styles = {
  chartContainer: {
    display: 'flex',
    justifyContent: 'flex-start', // Aligns everything to the left
    alignItems: 'center',         // Vertically centers items
    gap: '5px',                   // Controls space between the chart and the label
    padding: '0',                 // Removes default padding
  },
  chartWrapper: {
    width: '200px',               // Set width of the pie chart wrapper
    height: '200px',              // Set height of the pie chart wrapper
    padding: '0',                 // No padding around chart
    margin: '0',                  // Ensure no default margins
  },
  labels: {
    marginLeft: '5px',            // Reduce the space between the chart and the labels
  }
};

function StatusDoughnutChart() {
  return (
    <div style={styles.chartContainer}>
      <div style={styles.chartWrapper}>
        <DoughnutChart
          data={data}
          options={{ maintainAspectRatio: false }} // Ensures chart respects the container size
        />
      </div>
      <div style={styles.labels}>
        <h4>DB Instance Details</h4>
        {/* Add any other labels or data here */}
      </div>
    </div>
  );
}








const styles = {
  chartContainer: {
    display: 'flex',         // Enables flexbox
    justifyContent: 'flex-start', // Aligns the chart to the left
    alignItems: 'center',    // Vertically centers the chart
    paddingRight: '10px',    // Add some padding to the right of the chart
  },
  chart: {
    width: '200px',          // Set the width of the pie chart
    height: '200px',         // Set the height of the pie chart
  },
  labels: {
    marginLeft: '10px',      // Adjust the space between the pie chart and the label
  }
};

function StatusDoughnutChart() {
  return (
    <div style={styles.chartContainer}>
      <DoughnutChart
        data={data}
        width={styles.chart.width}
        height={styles.chart.height}
      />
      <div style={styles.labels}>
        <h4>DB Instance Details</h4>
        {/* Add other labels here */}
      </div>
    </div>
  );
}







.label {
  display: inline-block; /* Ensures the label is properly displayed */
  white-space: normal; /* Allows the label to wrap text */
  overflow: visible; /* Prevents text from being hidden */
  word-wrap: break-word; /* Breaks long words that may otherwise overflow */
  width: auto; /* Adjusts width automatically */
  max-width: 100%; /* Ensures it doesnâ€™t exceed the container */
}












import React from 'react';

const DatabaseDetailsTable = ({ dbDetails }) => {
    return (
        <div>
            <h2>Database Details</h2>
            <table border="1" cellPadding="10" cellSpacing="0">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Database Role</th>
                        <th>Version</th>
                        <th>Log Mode</th>
                        <th>Pluggable</th>
                    </tr>
                </thead>
                <tbody>
                    {dbDetails.map((db, index) => (
                        <tr key={index}>
                            <td>{db.NAME}</td>
                            <td>{db.DATABASE_ROLE}</td>
                            <td>{db.VERSION}</td>
                            <td>{db.LOG_MODE}</td>
                            <td>{db.PLUGGABLE}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

// Sample data, replace this with your actual dbDetails array
const sampleDbDetails = [
    {
        NAME: "JIR2TPRD",
        DATABASE_ROLE: "PRIMARY",
        VERSION: "19.0.0.0.0",
        LOG_MODE: "ARCHIVELOG",
        PLUGGABLE: "YES"
    }
];

export default function App() {
    return (
        <div className="App">
            <DatabaseDetailsTable dbDetails={sampleDbDetails} />
        </div>
    );
}










<div className="chart-container" style={{ display: 'flex', flexDirection: 'row', gap: '20px', width: '100%', height: '500px' }}>
  <div className="rohit">
    <h3>DB Instance Details:</h3>
    <StatusPieChart pie={instanceStatusData} />
  </div>
  <div className="rohit">
    <h3>Tablespace Free And Used Analysis:</h3>
    <StatusBarChart inputData={barchart} />
  </div>
</div>






import React from 'react';
import { Bar } from 'react-chartjs-2';

export default function StatusBarChart({ data: inputData }) {

    // Prepare data for the chart
    const tablespaces = inputData.map((row, index) => ({
        TABLESPACE_NAME: row.TABLESPACE_NAME,
        TOT_SIZE_GB: (row.TOT_SIZE_MB / 1024).toFixed(2),   // Convert MB to GB and round to 2 decimals
        TOT_USED_GB: (row.TOT_USED_MB / 1024).toFixed(2),
        TOT_FREE_GB: (row.TOT_FREE_MB / 1024).toFixed(2),
        PCT_USED: row.PCT_USED
    }));

    if (!tablespaces || tablespaces.length === 0) {
        return <div>No data available</div>;
    }

    console.log(tablespaces);

    const data = {
        labels: tablespaces.map(ts => `${ts.TABLESPACE_NAME}`),
        datasets: [
            {
                label: 'Total Size (GB)',
                data: tablespaces.map(ts => ts.TOT_SIZE_GB),
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
            },
            {
                label: 'Total Used (GB)',
                data: tablespaces.map(ts => ts.TOT_USED_GB),
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
            },
            {
                label: 'Total Free (GB)',
                data: tablespaces.map(ts => ts.TOT_FREE_GB),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
            }
        ]
    };

    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'right',
                alignContent: 'top'
            },
            tooltip: {
                callbacks: {
                    label: function (context) {
                        const tableSpace = tablespaces[context.dataIndex];
                        return `${tableSpace.TABLESPACE_NAME} (Used: ${tableSpace.TOT_USED_GB} GB, Free: ${tableSpace.TOT_FREE_GB} GB)`;
                    }
                }
            }
        },
        scales: {
            x: {
                stacked: true,
            },
            y: {
                stacked: true,
                beginAtZero: true,
                title: {
                    display: true,
                    text: 'Size (GB)'
                }
            }
        }
    };

    return (
        <div style={{ width: '520px', height: '300px', alignContent: 'top' }}>
            <Bar className="bar" data={data} options={options} />
        </div>
    );
}











// Assume `db_pie` is the object from the first image
const db_pie = {
    metaData: [{ name: 'INSTANCE_NUMBER' }, { name: 'INSTANCE_NAME' }, { name: 'HOST_NAME' }, { name: 'STATUS' }],
    rows: [
        {
            HOST_NAME: "10.119.11.217.ebiz.verizon.com",
            INSTANCE_NAME: "nposqa4",
            INSTANCE_NUMBER: 1,
            STATUS: "OPEN"
        },
        // Add more rows as needed
    ]
};

// Convert `db_pie` data to required format
const instances = db_pie.rows.map((row, index) => ({
    INSTANCE_NUMBER: row.INSTANCE_NUMBER || index + 1,  // Assign instance number dynamically if not provided
    INSTANCE_NAME: row.INSTANCE_NAME,
    HOST_NAME: row.HOST_NAME.split('.')[0],  // Strip domain to match the second image format
    STATUS: row.STATUS
}));

// Now `instances` will be in the format similar to the second image
console.log(instances);
