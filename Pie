I am writing to request your approval for my involvement in a chatbot development project being handled by another team. This project is quite new to meâ€”both exciting and challenging. I believe that contributing to it will provide me with a valuable learning experience, especially since this is my first time working with AAP-based approvals.

Though I plan to contribute as a shadow member, ensuring my current responsibilities aren't affected, I will put in extra effort from my side to actively participate. By working on this project, I aim to gain new skills that will benefit our team and help in updating our processes as well.

I kindly seek your guidance and approval for my involvement in this project, as it will be a great opportunity to learn and contribute simultaneously.
const renderColumn = (columnData) => (
  <div style={{ width: '100%' }}>
    {columnData.map((group, index) => (
      <div key={index}>
        {/* Group Header */}
        <div style={headerStyle}>{group.header}</div>

        {/* Blockers: Highlight all rows */}
        {group.header === "Blockers" && group.rows.length > 0 && (
          <table style={tableStyle}>
            <thead>
              <tr>
                {Object.keys(group.rows[0]).map((key) => (
                  <th key={key} style={thStyle}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {group.rows.map((item, rowIndex) => (
                <tr key={rowIndex} style={{ backgroundColor: 'yellow' }}>
                  {Object.keys(item).map((key) => (
                    <td key={key} style={tdStyle}>{item[key]}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {/* Long Runners: Highlight rows with Cur_SQL(min) > 5 */}
        {group.header === "Long Runners" && group.rows.length > 0 && (
          <table style={tableStyle}>
            <thead>
              <tr>
                {Object.keys(group.rows[0]).map((key) => (
                  <th key={key} style={thStyle}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {group.rows.map((item, rowIndex) => (
                <tr
                  key={rowIndex}
                  style={{
                    backgroundColor: parseFloat(item["Cur_SQL(min)"]) > 5 ? 'yellow' : 'transparent',
                  }}
                >
                  {Object.keys(item).map((key) => (
                    <td key={key} style={tdStyle}>{item[key]}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {/* ASM Diskgroup Usage: Highlight rows where Used PCT >= 95 */}
        {group.header === "ASM Diskgroup Usage" && group.rows.length > 0 && (
          <table style={tableStyle}>
            <thead>
              <tr>
                {Object.keys(group.rows[0]).map((key) => (
                  <th key={key} style={thStyle}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {group.rows.map((item, rowIndex) => (
                <tr
                  key={rowIndex}
                  style={{
                    backgroundColor: parseFloat(item["Used PCT"]) >= 95 ? 'yellow' : 'transparent',
                  }}
                >
                  {Object.keys(item).map((key) => (
                    <td key={key} style={tdStyle}>{item[key]}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {/* Current Active Sessions: Highlight rows where Count > 100 */}
        {group.header === "Current Active Sessions" && group.rows.length > 0 && (
          <table style={tableStyle}>
            <thead>
              <tr>
                {Object.keys(group.rows[0]).map((key) => (
                  <th key={key} style={thStyle}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {group.rows.map((item, rowIndex) => (
                <tr
                  key={rowIndex}
                  style={{
                    backgroundColor: parseInt(item["Count"], 10) > 100 ? 'yellow' : 'transparent',
                  }}
                >
                  {Object.keys(item).map((key) => (
                    <td key={key} style={tdStyle}>{item[key]}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {/* If there's no data, show a default message */}
        {group.rows.length === 0 && (
          <div style={{ color: 'green' }}>
            <h5>No data available for {group.header}</h5>
          </div>
        )}
      </div>
    ))}
  </div>
);































const renderColumn = (columnData) => (
  <div style={{ width: '100%' }}>
    {columnData.map((group, index) => (
      <div key={index}>
        {/* Common Header */}
        <div style={headerStyle}>{group.header}</div>
        
        {/* Chart Content (if available) */}
        {chartContent && group.header.includes("Details") && (
          <StatusDoughnutChart data={chartContent} />
        )}

        {/* If the group has data (rows), highlight them in yellow */}
        {group.rows.length > 0 && (
          <table style={tableStyle}>
            <thead>
              <tr>
                {Object.keys(group.rows[0]).map((key) => (
                  <th key={key} style={thStyle}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {group.rows.map((item, rowIndex) => (
                <tr key={rowIndex} style={{ backgroundColor: 'yellow' }}>
                  {Object.keys(item).map((key) => (
                    <td key={key} style={tdStyle}>{item[key]}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {/* Default message if no data */}
        {group.rows.length === 0 && (
          <div style={{ color: 'green' }}>
            <h5>No data available for {group.header}</h5>
          </div>
        )}
      </div>
    ))}
  </div>
);






import React, { useState } from 'react';

function DatabaseHealthCheckReports({ group, keys }) {
  // State to store the killed items based on SID
  const [killedItems, setKilledItems] = useState({});

  // Function to handle the kill process
  const killProcess = (item) => {
    // Mark the specific item as killed using its SID
    setKilledItems((prevKilledItems) => ({
      ...prevKilledItems,
      [item.SID]: true,  // Use SID as the key to disable the row's button
    }));

    // Trigger the alert after the process is marked as killed
    window.alert(`Killing process for SID: ${item.SID}`);
  };

  return (
    <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '10px' }}>
      <thead>
        <tr>
          {keys.map((key) => (
            <th
              key={key}
              style={{
                border: '1px solid #ddd',
                padding: '8px',
                backgroundColor: '#f2f2f2',
                color: '#626355',
                fontSize: '12px',
              }}
            >
              {key}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {group.map((item, rowIndex) => (
          <tr key={rowIndex}>
            {keys.map((key) => (
              <td
                key={key}
                style={{
                  border: '1px solid #ddd',
                  padding: '8px',
                }}
              >
                {/* Check if the key is "Action" and render the button */}
                {key === 'Action' ? (
                  <button
                    className="btn btn-primary btn-block"
                    onClick={() => killProcess(item)}
                    disabled={!!killedItems[item.SID]} // Disable button for the specific row
                  >
                    {killedItems[item.SID] ? 'Killed' : 'Kill'}
                  </button>
                ) : (
                  // Render the other column values if the key is not "Action"
                  typeof item[key] === 'number' ? item[key].toFixed(1) : item[key]
                )}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default DatabaseHealthCheckReports;


const express = require('express');
const cors = require('cors');
const cassandra = require('cassandra-driver');
const app = express();
const PORT = 5000;

// Middleware
app.use(express.json());
app.use(cors());

// POST route to execute Cassandra query with dynamic username/password
app.post('/api/executeQuery', async (req, res) => {
  const { cluster, env, dc, server, query, username, password } = req.body;

  // Validate input
  if (!cluster || !env || !dc || !server || !query || !username || !password) {
    return res.status(400).json({ error: 'All inputs (Cluster, ENV, DC, Server, Query, Username, and Password) are required' });
  }

  // Check for prohibited commands
  if (query.includes("DROP") || query.includes("DELETE")) {
    return res.status(400).json({ error: "Query contains prohibited commands (DROP, DELETE)." });
  }

  // Create a Cassandra client with the provided username and password
  const client = new cassandra.Client({
    contactPoints: ['127.0.0.1'],  // Replace with your Cassandra contact points
    localDataCenter: 'datacenter1',  // Replace with your data center
    keyspace: 'your_keyspace',  // Replace with your Cassandra keyspace
    authProvider: new cassandra.auth.PlainTextAuthProvider(username, password)  // Use the username and password from the request
  });

  // Try executing the query
  try {
    const result = await client.execute(query);
    res.json(result.rows);  // Send the query result back to the frontend
  } catch (error) {
    console.error('Error executing query:', error);
    res.status(500).json({ error: 'Error executing query' });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});









const express = require('express');
const cassandra = require('cassandra-driver');
const cors = require('cors');
const app = express();
const PORT = 5000;

// Middleware
app.use(express.json());
app.use(cors());

// Cassandra client configuration
const client = new cassandra.Client({
  contactPoints: ['127.0.0.1'], // Replace with actual Cassandra contact point
  localDataCenter: 'datacenter1', // Replace with your Cassandra Data Center
  keyspace: 'your_keyspace' // Replace with your Cassandra keyspace
});

// POST route to execute Cassandra query
app.post('/api/executeQuery', async (req, res) => {
  const { cluster, env, dc, server, query } = req.body;

  // Input validation
  if (!cluster || !env || !dc || !server || !query) {
    return res.status(400).json({ error: 'All inputs (Cluster, ENV, DC, Server, and Query) are required' });
  }

  // Check for prohibited commands
  if (query.includes("DROP") || query.includes("DELETE")) {
    return res.status(400).json({ error: "Query contains prohibited commands (DROP, DELETE)." });
  }

  // Assuming the query is valid, proceed with execution
  try {
    const result = await client.execute(query);
    res.json(result.rows);
  } catch (error) {
    console.error('Error executing query:', error);
    res.status(500).json({ error: 'Error executing query' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});








import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';  // Import the CSS file

function App() {
  const [cluster, setCluster] = useState('');
  const [env, setEnv] = useState('');
  const [dc, setDc] = useState('');
  const [servers, setServers] = useState([]);
  const [selectedServer, setSelectedServer] = useState('');
  const [query, setQuery] = useState('');
  const [queryResult, setQueryResult] = useState(null);
  const [error, setError] = useState('');

  // Predefined server list (now in the frontend)
  const serverList = {
    "OR": {
      "QA1": {
        "SDC1": [
          "mcs-cass-t1-n1.ebiz.verizon.com",
          "mcs-cass-t1-n2.ebiz.verizon.com",
          "mcs-cass-t1-n3.ebiz.verizon.com",
          "mcs-cass-t1-n4.ebiz.verizon.com"
        ]
      },
      "QA2": {
        "SDC1": [
          "mcs-cass-t2-n1.ebiz.verizon.com",
          "mcs-cass-t2-n2.ebiz.verizon.com"
        ]
      }
    },
    "CART": {
      "QA1": {
        "EAST": [
          "mcs-cart-east-n1.ebiz.verizon.com",
          "mcs-cart-east-n2.ebiz.verizon.com"
        ]
      }
    }
  };

  // Fetch servers based on user selection
  useEffect(() => {
    if (cluster && env && dc) {
      const fetchedServers = serverList[cluster]?.[env]?.[dc] || [];
      setServers(fetchedServers);
      setSelectedServer('');  // Reset server selection when new servers are fetched
    }
  }, [cluster, env, dc]);

  const handleQueryExecution = async () => {
    if (!selectedServer) {
      setError('Please select a server.');
      return;
    }
    if (!query) {
      setError('Please enter a query.');
      return;
    }

    // Send the query and inputs to the backend for execution
    try {
      const response = await axios.post('http://localhost:5000/api/executeQuery', {
        cluster,
        env,
        dc,
        server: selectedServer,
        query
      });
      setQueryResult(response.data);
      setError('');
    } catch (err) {
      setError('Error executing query: ' + err.response?.data?.error || 'Unknown error');
      setQueryResult(null);
    }
  };

  return (
    <div className="App">
      <div className="container">
        <h1>Cassandra Query Executor</h1>
        <div className="form-group">
          <label>Cluster:</label>
          <select value={cluster} onChange={(e) => setCluster(e.target.value)}>
            <option value="">Select Cluster</option>
            <option value="OR">OR</option>
            <option value="CART">CART</option>
            <option value="CDN1">CDN1</option>
          </select>
        </div>
        <div className="form-group">
          <label>ENV:</label>
          <select value={env} onChange={(e) => setEnv(e.target.value)}>
            <option value="">Select ENV</option>
            <option value="QA1">QA1</option>
            <option value="QA2">QA2</option>
            <option value="QA3">QA3</option>
          </select>
        </div>
        <div className="form-group">
          <label>DC:</label>
          <select value={dc} onChange={(e) => setDc(e.target.value)}>
            <option value="">Select DC</option>
            <option value="SDC1">SDC1</option>
            <option value="EAST">EAST</option>
            <option value="WEST">WEST</option>
          </select>
        </div>

        {/* Servers Dropdown */}
        {servers.length > 0 && (
          <div className="form-group">
            <label>Servers:</label>
            <select value={selectedServer} onChange={(e) => setSelectedServer(e.target.value)}>
              <option value="">Select Server</option>
              {servers.map((server, index) => (
                <option key={index} value={server}>{server}</option>
              ))}
            </select>
          </div>
        )}

        <div className="form-group">
          <label>Query:</label>
          <textarea value={query} onChange={(e) => setQuery(e.target.value)} />
        </div>
        <button onClick={handleQueryExecution} className="btn">Execute Query</button>
        {error && <div className="error">{error}</div>}
        {queryResult && (
          <div>
            <h3>Query Result</h3>
            <table className="query-result">
              <thead>
                <tr>
                  {Object.keys(queryResult[0]).map((key, index) => (
                    <th key={index}>{key}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {queryResult.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    {Object.values(row).map((value, cellIndex) => (
                      <td key={cellIndex}>{value}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;











import React, { useState, useEffect } from 'react';
import './App.css';  // Import the CSS file

function App() {
  const [cluster, setCluster] = useState('');
  const [env, setEnv] = useState('');
  const [dc, setDc] = useState('');
  const [servers, setServers] = useState([]);
  const [selectedServer, setSelectedServer] = useState('');
  const [query, setQuery] = useState('');
  const [queryResult, setQueryResult] = useState(null);
  const [error, setError] = useState('');

  // Predefined server list (now in the frontend)
  const serverList = {
    "OR": {
      "QA1": {
        "SDC1": [
          "mcs-cass-t1-n1.ebiz.verizon.com",
          "mcs-cass-t1-n2.ebiz.verizon.com",
          "mcs-cass-t1-n3.ebiz.verizon.com",
          "mcs-cass-t1-n4.ebiz.verizon.com"
        ]
      },
      "QA2": {
        "SDC1": [
          "mcs-cass-t2-n1.ebiz.verizon.com",
          "mcs-cass-t2-n2.ebiz.verizon.com"
        ]
      }
    },
    "CART": {
      "QA1": {
        "EAST": [
          "mcs-cart-east-n1.ebiz.verizon.com",
          "mcs-cart-east-n2.ebiz.verizon.com"
        ]
      }
    }
  };

  // Fetch servers based on user selection
  useEffect(() => {
    if (cluster && env && dc) {
      const fetchedServers = serverList[cluster]?.[env]?.[dc] || [];
      setServers(fetchedServers);
      setSelectedServer('');  // Reset server selection when new servers are fetched
    }
  }, [cluster, env, dc]);

  const handleQueryExecution = () => {
    if (!selectedServer) {
      setError('Please select a server.');
      return;
    }
    if (!query) {
      setError('Please enter a query.');
      return;
    }

    // Mock execution result (no backend for this part)
    setError('');
    setQueryResult([{ column1: 'Sample Result 1', column2: 'Sample Result 2' }]);
  };

  return (
    <div className="App">
      <div className="container">
        <h1>Cassandra Query Executor</h1>
        <div className="form-group">
          <label>Cluster:</label>
          <select value={cluster} onChange={(e) => setCluster(e.target.value)}>
            <option value="">Select Cluster</option>
            <option value="OR">OR</option>
            <option value="CART">CART</option>
            <option value="CDN1">CDN1</option>
          </select>
        </div>
        <div className="form-group">
          <label>ENV:</label>
          <select value={env} onChange={(e) => setEnv(e.target.value)}>
            <option value="">Select ENV</option>
            <option value="QA1">QA1</option>
            <option value="QA2">QA2</option>
            <option value="QA3">QA3</option>
          </select>
        </div>
        <div className="form-group">
          <label>DC:</label>
          <select value={dc} onChange={(e) => setDc(e.target.value)}>
            <option value="">Select DC</option>
            <option value="SDC1">SDC1</option>
            <option value="EAST">EAST</option>
            <option value="WEST">WEST</option>
          </select>
        </div>

        {/* Servers Dropdown */}
        {servers.length > 0 && (
          <div className="form-group">
            <label>Servers:</label>
            <select value={selectedServer} onChange={(e) => setSelectedServer(e.target.value)}>
              <option value="">Select Server</option>
              {servers.map((server, index) => (
                <option key={index} value={server}>{server}</option>
              ))}
            </select>
          </div>
        )}

        <div className="form-group">
          <label>Query:</label>
          <textarea value={query} onChange={(e) => setQuery(e.target.value)} />
        </div>
        <button onClick={handleQueryExecution} className="btn">Execute Query</button>
        {error && <div className="error">{error}</div>}
        {queryResult && (
          <div>
            <h3>Query Result</h3>
            <table className="query-result">
              <thead>
                <tr>
                  {Object.keys(queryResult[0]).map((key, index) => (
                    <th key={index}>{key}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {queryResult.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    {Object.values(row).map((value, cellIndex) => (
                      <td key={cellIndex}>{value}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;














const styles = {
  chartContainer: {
    display: 'flex',
    justifyContent: 'flex-start', // Aligns everything to the left
    alignItems: 'center',         // Vertically centers items
    gap: '5px',                   // Controls space between the chart and the label
    padding: '0',                 // Removes default padding
  },
  chartWrapper: {
    width: '200px',               // Set width of the pie chart wrapper
    height: '200px',              // Set height of the pie chart wrapper
    padding: '0',                 // No padding around chart
    margin: '0',                  // Ensure no default margins
  },
  labels: {
    marginLeft: '5px',            // Reduce the space between the chart and the labels
  }
};

function StatusDoughnutChart() {
  return (
    <div style={styles.chartContainer}>
      <div style={styles.chartWrapper}>
        <DoughnutChart
          data={data}
          options={{ maintainAspectRatio: false }} // Ensures chart respects the container size
        />
      </div>
      <div style={styles.labels}>
        <h4>DB Instance Details</h4>
        {/* Add any other labels or data here */}
      </div>
    </div>
  );
}








const styles = {
  chartContainer: {
    display: 'flex',         // Enables flexbox
    justifyContent: 'flex-start', // Aligns the chart to the left
    alignItems: 'center',    // Vertically centers the chart
    paddingRight: '10px',    // Add some padding to the right of the chart
  },
  chart: {
    width: '200px',          // Set the width of the pie chart
    height: '200px',         // Set the height of the pie chart
  },
  labels: {
    marginLeft: '10px',      // Adjust the space between the pie chart and the label
  }
};

function StatusDoughnutChart() {
  return (
    <div style={styles.chartContainer}>
      <DoughnutChart
        data={data}
        width={styles.chart.width}
        height={styles.chart.height}
      />
      <div style={styles.labels}>
        <h4>DB Instance Details</h4>
        {/* Add other labels here */}
      </div>
    </div>
  );
}







.label {
  display: inline-block; /* Ensures the label is properly displayed */
  white-space: normal; /* Allows the label to wrap text */
  overflow: visible; /* Prevents text from being hidden */
  word-wrap: break-word; /* Breaks long words that may otherwise overflow */
  width: auto; /* Adjusts width automatically */
  max-width: 100%; /* Ensures it doesnâ€™t exceed the container */
}












import React from 'react';

const DatabaseDetailsTable = ({ dbDetails }) => {
    return (
        <div>
            <h2>Database Details</h2>
            <table border="1" cellPadding="10" cellSpacing="0">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Database Role</th>
                        <th>Version</th>
                        <th>Log Mode</th>
                        <th>Pluggable</th>
                    </tr>
                </thead>
                <tbody>
                    {dbDetails.map((db, index) => (
                        <tr key={index}>
                            <td>{db.NAME}</td>
                            <td>{db.DATABASE_ROLE}</td>
                            <td>{db.VERSION}</td>
                            <td>{db.LOG_MODE}</td>
                            <td>{db.PLUGGABLE}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

// Sample data, replace this with your actual dbDetails array
const sampleDbDetails = [
    {
        NAME: "JIR2TPRD",
        DATABASE_ROLE: "PRIMARY",
        VERSION: "19.0.0.0.0",
        LOG_MODE: "ARCHIVELOG",
        PLUGGABLE: "YES"
    }
];

export default function App() {
    return (
        <div className="App">
            <DatabaseDetailsTable dbDetails={sampleDbDetails} />
        </div>
    );
}










<div className="chart-container" style={{ display: 'flex', flexDirection: 'row', gap: '20px', width: '100%', height: '500px' }}>
  <div className="rohit">
    <h3>DB Instance Details:</h3>
    <StatusPieChart pie={instanceStatusData} />
  </div>
  <div className="rohit">
    <h3>Tablespace Free And Used Analysis:</h3>
    <StatusBarChart inputData={barchart} />
  </div>
</div>






import React from 'react';
import { Bar } from 'react-chartjs-2';

export default function StatusBarChart({ data: inputData }) {

    // Prepare data for the chart
    const tablespaces = inputData.map((row, index) => ({
        TABLESPACE_NAME: row.TABLESPACE_NAME,
        TOT_SIZE_GB: (row.TOT_SIZE_MB / 1024).toFixed(2),   // Convert MB to GB and round to 2 decimals
        TOT_USED_GB: (row.TOT_USED_MB / 1024).toFixed(2),
        TOT_FREE_GB: (row.TOT_FREE_MB / 1024).toFixed(2),
        PCT_USED: row.PCT_USED
    }));

    if (!tablespaces || tablespaces.length === 0) {
        return <div>No data available</div>;
    }

    console.log(tablespaces);

    const data = {
        labels: tablespaces.map(ts => `${ts.TABLESPACE_NAME}`),
        datasets: [
            {
                label: 'Total Size (GB)',
                data: tablespaces.map(ts => ts.TOT_SIZE_GB),
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
            },
            {
                label: 'Total Used (GB)',
                data: tablespaces.map(ts => ts.TOT_USED_GB),
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
            },
            {
                label: 'Total Free (GB)',
                data: tablespaces.map(ts => ts.TOT_FREE_GB),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
            }
        ]
    };

    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'right',
                alignContent: 'top'
            },
            tooltip: {
                callbacks: {
                    label: function (context) {
                        const tableSpace = tablespaces[context.dataIndex];
                        return `${tableSpace.TABLESPACE_NAME} (Used: ${tableSpace.TOT_USED_GB} GB, Free: ${tableSpace.TOT_FREE_GB} GB)`;
                    }
                }
            }
        },
        scales: {
            x: {
                stacked: true,
            },
            y: {
                stacked: true,
                beginAtZero: true,
                title: {
                    display: true,
                    text: 'Size (GB)'
                }
            }
        }
    };

    return (
        <div style={{ width: '520px', height: '300px', alignContent: 'top' }}>
            <Bar className="bar" data={data} options={options} />
        </div>
    );
}











// Assume `db_pie` is the object from the first image
const db_pie = {
    metaData: [{ name: 'INSTANCE_NUMBER' }, { name: 'INSTANCE_NAME' }, { name: 'HOST_NAME' }, { name: 'STATUS' }],
    rows: [
        {
            HOST_NAME: "10.119.11.217.ebiz.verizon.com",
            INSTANCE_NAME: "nposqa4",
            INSTANCE_NUMBER: 1,
            STATUS: "OPEN"
        },
        // Add more rows as needed
    ]
};

// Convert `db_pie` data to required format
const instances = db_pie.rows.map((row, index) => ({
    INSTANCE_NUMBER: row.INSTANCE_NUMBER || index + 1,  // Assign instance number dynamically if not provided
    INSTANCE_NAME: row.INSTANCE_NAME,
    HOST_NAME: row.HOST_NAME.split('.')[0],  // Strip domain to match the second image format
    STATUS: row.STATUS
}));

// Now `instances` will be in the format similar to the second image
console.log(instances);
